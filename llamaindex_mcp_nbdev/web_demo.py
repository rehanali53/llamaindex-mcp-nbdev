"""Interactive web demo for SQLite MCP Server"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_web_demo.ipynb.

# %% auto 0
__all__ = ['app', 'DB_PATH', 'QueryRequest', 'startup_event', 'add_data', 'read_data', 'serve_demo', 'get_stats', 'run_demo']

# %% ../nbs/03_web_demo.ipynb 3
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from pydantic import BaseModel
import sqlite3
import os
from typing import List, Tuple, Dict, Any
from .core import init_db

# %% ../nbs/03_web_demo.ipynb 4
# Create FastAPI app
app = FastAPI(title="SQLite MCP Server Demo")

# Add CORS middleware to allow browser requests
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, specify your domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Request models
class QueryRequest(BaseModel):
    query: str

# Database path
DB_PATH = "demo.db"

# %% ../nbs/03_web_demo.ipynb 5
# Initialize database on startup
@app.on_event("startup")
async def startup_event():
    """Initialize database on server startup"""
    init_db(DB_PATH)
    print(f"Database initialized at: {DB_PATH}")

# %% ../nbs/03_web_demo.ipynb 6
@app.post("/add_data")
async def add_data(request: QueryRequest):
    """Add data to the database"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Validate that it's an INSERT query
        if not request.query.strip().upper().startswith("INSERT"):
            raise HTTPException(status_code=400, detail="Only INSERT queries are allowed")
        
        cursor.execute(request.query)
        conn.commit()
        conn.close()
        
        return {"success": True, "message": "Data added successfully"}
    
    except sqlite3.Error as e:
        return {"success": False, "error": str(e)}
    except Exception as e:
        return {"success": False, "error": str(e)}

# %% ../nbs/03_web_demo.ipynb 7
@app.post("/read_data")
async def read_data(request: QueryRequest):
    """Read data from the database"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Validate that it's a SELECT query
        if not request.query.strip().upper().startswith("SELECT"):
            raise HTTPException(status_code=400, detail="Only SELECT queries are allowed")
        
        cursor.execute(request.query)
        results = cursor.fetchall()
        conn.close()
        
        return {"success": True, "data": results}
    
    except sqlite3.Error as e:
        return {"success": False, "error": str(e)}
    except Exception as e:
        return {"success": False, "error": str(e)}

# %% ../nbs/03_web_demo.ipynb 8
@app.get("/")
async def serve_demo():
    """Serve the demo HTML page"""
    html_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "demo.html")
    if os.path.exists(html_path):
        return FileResponse(html_path)
    else:
        return {"message": "Demo page not found. Please ensure demo.html is in the project root."}

# %% ../nbs/03_web_demo.ipynb 9
@app.get("/stats")
async def get_stats():
    """Get database statistics"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Get total count
        cursor.execute("SELECT COUNT(*) FROM people")
        total = cursor.fetchone()[0]
        
        # Get average age
        cursor.execute("SELECT AVG(age) FROM people")
        avg_age = cursor.fetchone()[0] or 0
        
        # Get professions count
        cursor.execute("SELECT profession, COUNT(*) FROM people GROUP BY profession")
        professions = cursor.fetchall()
        
        conn.close()
        
        return {
            "success": True,
            "total_records": total,
            "average_age": round(avg_age, 2) if avg_age else 0,
            "professions": {prof: count for prof, count in professions}
        }
    
    except Exception as e:
        return {"success": False, "error": str(e)}

# %% ../nbs/03_web_demo.ipynb 10
def run_demo():
    """Run the web demo server"""
    import uvicorn
    print("Starting web demo server...")
    print("Open http://localhost:8000 in your browser to view the demo")
    uvicorn.run(app, host="0.0.0.0", port=8000)

# %% ../nbs/03_web_demo.ipynb 11
#| eval: false
if __name__ == "__main__":
    run_demo()
